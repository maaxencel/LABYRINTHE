
int unite;
int diz;
int cent;
int mil;
//Programme demandant le score du joueur et ordonnant le fichier de sauvegarde
//En fonction du score.
void main(){
int compteur=0;	//on met le curseur a 0
resetConsole();
openFileReader("sauvescore.txt");	//on ouvre le fichier contenant les best scores.
int v; //variable qui prend la valeur de la lettre au curseur.
int x=0; //Variable qui détermine la taille du tableau
//La première 'lettre' n'est pas lue dans la boucle , pour pouvoir donner une première valeur à v, afin que le while fonctionne
v=readNextCode(); //On lit la première lettre
x++;
compteur++; //Le tableau augmente de 1 et le compteur aussi
while(v!=13) //Tant qu'on atteint pas un retour ligne.
	{
   		v=readNextCode(); //On lit la lettre suivante
   		x++; //Augmentant la taille du tableau
   		compteur++; //Et du curseur 'mémoire'
   	}
x=x-1; //On réduit la taille de 1 , car le retour à la ligne à été pris en compte
int taillepremier=x;
int[] scorepremier= new int [x]; //On crée le tableau de taille parfaite.
int y=0; //Variable qui indique le rang dans le tableau (=curseur)
closeFileReader();
openFileReader("sauvescore.txt"); //On recommence au début du doc.
int sommepremier=0;
int puissance=x-1;
int puissancemem=puissance+1; //Pour sommer le score du joueur.
while(y<x) //Tant que le curseur du tableau n'atteint pas le bout du tableau
	{
  		v=readNextCode(); //On avance
  		scorepremier[y]=v; //Et on met au tableau le code de la lettre
  		//A propos des sommes : je somme en additionnant chaque nombre du chiffre à la puissance de son rang
  		//Exemple : 123 --> 1^2 + 2^1 +3^0.
  		//Problème : à cause des puissances, tout chiffre ayant les unités (et centaines)
  		//mais l'unité différente auront la même valeur de somme..
  		//Solution : On ajoute a la somme le plus 'haut' chiffre du score *puissance
  		//Ex : 211 -> somme +(2*3)|| 54->somme+5*2;
  		//Permet une différenciation des sommes avec une précision de 3 points
  		y++; //Le curseur du tableau avance	
  	}
  	//A la fin de la boucle , puissance =-1 mais la calcul est effectué avant la décrementation donc sans importance.
y=0;
while(y<x)
{
	int puissancepremier=(int)Math.pow(10,puissance);
	sommepremier=(sommepremier+(scorepremier[y]*puissancepremier));
	puissance=puissance-1;
	y++;  	
}
y=y-1;
sommepremier=(sommepremier+(scorepremier[0]*puissancemem));
  	//TESTS DIFFERENTS
  	/*print(x);
  	println();
  	print(scorepremier[0]);
  	println();
  	print(scorepremier[1]);
  	println();
  	print(scorepremier[2]);
  	println();*/
    // On a le score du premier du texte en 3 parties ascii.
v=readNextCode(); //Curseur sur le retour de ligne
v=readNextCode(); //Curseur sur le code indiquant un début de ligne
compteur=compteur+2; //Le curseur suit l'avancée
x=0; //On va créer un nouveau tableau, donc on remet sa taille à 0
v=readNextCode();
x++;
compteur++;
while(v!=13)
	{
   		v=readNextCode(); //On continue d'avancer dans les caractères
   		x++; //Le tableau grandit
   		//Mais pas le curseur car on veut revenir au DEBUT du mot actuellement étudié
  	}
x=x-1; //On réduit pour les mêmes raisons que la dernière fois
int taillesecond=x;
int[] scoresecond= new int [x];
y=0;
closeFileReader();
openFileReader("sauvescore.txt");
int sommesecond=0;
puissance=x-1;
puissancemem=puissance+1;
int d=0; //On a fermé le fichier, on est donc revenu au tout départ du fichier, on veut maintenant avancer jusqu'au début du second 'mot'
while(d!=compteur-2) //-2 car il y a un 'caractère ascii' pour le saut de ligne, et un pour le début de ligne
	{
  		v=readNextCode(); //On revient au mot
  		d++;
  	}
int curseursecond=d+1;
while(y<x) //Maintenant revenu au début du mot, tant que le curseur du tableau n'atteint pas le bout du tableau
  	{
  		v=readNextCode(); //On avance
  		scoresecond[y]=v;//En mettant au tableau cette valeur
  		y++;
  		compteur++;//On recommence a avancer
  	}
y=0;
while(y<x)
{
	int puissancesecond=(int)Math.pow(10,puissance);
	sommesecond=(sommesecond+(scoresecond[y]*puissancesecond));
  	puissance=puissance-1;
  	y++; 	
}
y=y-1;
sommesecond=(sommesecond+(scoresecond[0]*puissancemem));
  	/*println();
  	print(scoresecond[0]);
  	println();
  	print(scoresecond[1]);*/
v=readNextCode();
v=readNextCode();
compteur=compteur+2; //On se trouve au début du mot, on ne l'incrémente plus
x=0;
v=readNextCode();
x++;
compteur++;
while(v!=13)
   {
   	v=readNextCode();
   	x++;
   //Pas d'incrémentation du compteur
   }
x=x-1;
int tailletroisieme=x;
int[] scoretroisieme= new int [x];
y=0;
closeFileReader();
openFileReader("sauvescore.txt");
d=0;
int sommetroisieme=0;
puissance=x-1;
puissancemem=puissance+1;
while(d!=compteur-3)
	{
  		v=readNextCode();
  		d++;
  	}
int curseurtroisieme=d+1;
while(y<x)
  	{
  		v=readNextCode();
  		scoretroisieme[y]=v;
  		y++;
  		compteur++; //On réincrémente.
  	}
y=0;
while(y<x)
{
	int puissancetroisieme=(int)Math.pow(10,puissance);
	sommetroisieme=(sommetroisieme+(scoretroisieme[y]*puissancetroisieme));
  	puissance=puissance-1;  
  	y++;	
}
y=y-1;
sommetroisieme=(sommetroisieme+(scoretroisieme[0]*puissancemem));
  	/*print(scoretroisieme[0]);
  	println();
  	print(scoretroisieme[1]);
  	println();*/
v=readNextCode();
v=readNextCode();
x=0;
compteur=compteur+2;
v=readNextCode();
x++;
compteur++;
while(v!=13)
	{
   		v=readNextCode();
   		x++;
   	}
x=x-1;
int taillequatrieme=x;
int[] scorequatrieme= new int [x];
y=0;
closeFileReader();
openFileReader("sauvescore.txt");
d=0;
puissance=x-1;
puissancemem=puissance+1;
int sommequatrieme=0;
while(d!=compteur-4)
  	{
  		v=readNextCode();
  		d++;
  	}
int curseurquatrieme=d+1;
  	while(y<x)
  	{
  		v=readNextCode();
  		scorequatrieme[y]=v;
  		y++;
  		compteur++;
  	}
  	y=0;
  	while(y<x)
  	{
  		int puissancequatrieme=(int)Math.pow(10,puissance);
  		sommequatrieme=(sommequatrieme+(scorequatrieme[y]*puissancequatrieme));
  		puissance=puissance-1;
  		y++;
  	}
y=y-1;
sommequatrieme=(sommequatrieme+(scorequatrieme[0]*puissancemem));
  	/*print(scorequatrieme[0]);
  	println();
  	print(scorequatrieme[1]);
  	println();*/
v=readNextCode();
v=readNextCode();
x=0;
compteur=compteur+2;
v=readNextCode();
x++;
compteur++;
while(v!=-1)
   {
   	v=readNextCode();
   	x++;
   }
x=x-1;
int taillecinquieme=x;
int[] scorecinquieme= new int [x];
y=0;
closeFileReader();
openFileReader("sauvescore.txt");
d=0;
puissance=x-1;
puissancemem=puissance+1;
int sommecinquieme=0;
while(d!=compteur-4)
  	{
  		v=readNextCode();
  		d++;
  	}
int curseurcinquieme=d+1;
  	while(y<x)
  	{
  		v=readNextCode();
  		scorecinquieme[y]=v;
  		y++;
  		compteur++;
  	}
  	y=0;
  	while(y<x)
  	{
  		int puissancecinquieme=(int)Math.pow(10,puissance);
  		sommecinquieme=(sommecinquieme+(scorecinquieme[y]*puissancecinquieme));
  		puissance=puissance-1;
  		y++;
  	}
y=y-1;
sommecinquieme=(sommecinquieme+(scorecinquieme[0]*puissancemem));
  	//on a les 5 tableaux avec le code ascii de chaque chiffre du score affecté à une case.
int scorejoueur= readInt("Score ?");
int taille=0; //Variable renseignant la taille du tableau a créer pour le score du joueur.
if(scorejoueur<10)
{
	unite =scorejoueur;
	taille=1;
}
if(scorejoueur>=10&&scorejoueur<100)
{
	double dizaine =(scorejoueur)/10;
	diz = (int) floor(dizaine);
	unite = (scorejoueur -(diz*10));
	taille=2;
}
if(scorejoueur>=100&&scorejoueur<1000)
{
	double centaine = scorejoueur/100;
	cent = (int) floor(centaine);
	double dizaine =(scorejoueur -(cent*100))/10;
	diz = (int) floor(dizaine);
	unite = (scorejoueur -((cent*100)+(diz*10)));
	taille=3;
}
if(scorejoueur>1000)
{
	double millier = scorejoueur/1000;
	mil = (int) floor(millier);
	double centaine = (scorejoueur-(mil*1000))/100;
	cent = (int) floor(centaine);
	double dizaine =(scorejoueur -((mil*1000)+(cent*100)))/10;
	diz = (int) floor(dizaine);
	unite = (scorejoueur -((mil*1000)+(cent*100)+(diz*10)));
	taille=4;
}
int[] tabjoueur = new int[taille];
if(scorejoueur<10)
{
	tabjoueur[0]=unite;
}
if(scorejoueur>=10&&scorejoueur<100)
{
	tabjoueur[0]=unite;
	tabjoueur[1]=diz;
}
if(scorejoueur>=100&&scorejoueur<1000)
{
	tabjoueur[0]=unite;
	tabjoueur[1]=diz;
	tabjoueur[2]=cent;
}
if(scorejoueur>1000)
{
	tabjoueur[0]=unite;
	tabjoueur[1]=diz;
	tabjoueur[2]=cent;
	tabjoueur[3]=mil;
}
//Maintenant 5 tableaux avec une case = un chiffre en ascii du score + tableau contenant le chiffre en décimal du score du joueur.
//Il faut convertir le tableau du joueur, comparer et modifier le fichier txt.
int curseur=0;
int sommejoueur=0;
puissance=taille-1;
puissancemem=puissance;
while(curseur!=taille) //On aurait pu utiliser la variable puissance, mais ce ne serait pas logique.
{
	tabjoueur[curseur]=tabjoueur[curseur]+48; //Conversion en ascii relativement simple car 0 = 48 en ascii, on ajoute donc 48 au chiffre car les chiffres se 'suivent' sur la table de caractères ascii.
	curseur++;
}
/*print(tabjoueur[0]);
println();
print(tabjoueur[1]);*/
curseur=0;
while(curseur<taille) //On obtient le score de la même manière que les 5 précédents
{
	int puissancejoueur=(int)Math.pow(10,puissance);
		sommejoueur=(sommejoueur+(tabjoueur[taille-(curseur+1)]*puissancejoueur));
  		puissance=puissance-1;
  		curseur++;
}
curseur=curseur-1;
sommejoueur=sommejoueur+(tabjoueur[curseur]*puissancemem);
//On a maintenant de quoi comparer les scores.
closeFileReader();
int s=0;
print(sommepremier);
println();
print(sommesecond);
println();
print(sommetroisieme);
println();
print(sommequatrieme);
println();
print(sommecinquieme);
println();
println();
print(sommejoueur);
openFileWriter("sauvescore.txt"); //Arrêt de la lecture et début de l'écriture.
if(sommejoueur<sommecinquieme)
{ //Réecriture normale du fichier
	while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillecinquieme)
	{
		writeNextCode(scorecinquieme[s]);
		s++;
	}
}
if(sommejoueur>sommecinquieme&&sommejoueur <sommequatrieme)//Donc il est cinquieme
	{
		//On ecrit tout normal sauf le cinquième
		while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taille)
		{
			int curseurjoueur=taille-(s+1);
			writeNextCode(tabjoueur[curseurjoueur]);
			s++;
		}
	s=0;
	}
if(sommejoueur>sommequatrieme&&sommejoueur<sommetroisieme)
	{
		while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taille)
		{
			writeNextCode(tabjoueur[(taille-(s+1))]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	}
if(sommejoueur>sommetroisieme&&sommejoueur<sommesecond)
	{
		while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taille)
		{
			int curseurjoueur=taille-(s+1);
			writeNextCode(tabjoueur[curseurjoueur]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	s=0;
	}
if(sommejoueur>sommesecond&&sommejoueur<sommepremier)
	{
		while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taille)
		{
			int curseurjoueur=taille-(s+1);
			writeNextCode(tabjoueur[curseurjoueur]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	s=0;
	}
if(sommejoueur>sommepremier)
	{
		while(s<taille)
		{
			int curseurjoueur=taille-(s+1);
			writeNextCode(tabjoueur[curseurjoueur]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillepremier)
		{
			writeNextCode(scorepremier[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillesecond)
		{
			writeNextCode(scoresecond[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<tailletroisieme)
		{
			writeNextCode(scoretroisieme[s]);
			s++;
		}
	writeNextCode(13);
	writeNextCode(10);
	s=0;
	while(s<taillequatrieme)
		{
			writeNextCode(scorequatrieme[s]);
			s++;
		}
	s=0;
	}
	closeFileWriter();	
}